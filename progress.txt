НУЖНО СДЕЛАТЬ

Реализовать модерацию
Добавить регион Москвы

Проверить, что админка доступна только админам
Опубликовать

//ТОDO реализовать серверную логику по просрочке заявок, метку времени встречь сохранил, нужно переходить в админку и запрашивать и сравнивать с текущей датой
Прикрутить МОНЕТИЗАЦИЮ
Какой счет нужно открыть в долларах, чтобы получать переводы? https://support.google.com/googleplay/android-developer/answer/7161440

ОПЦИИ
Зажигать экран при уведомлении
Вибрация при уведомлении
Звук при уведомлении
Сделать видимость уведомлений в зависимости от настроек пользователя. Инфа тут https://developer.android.com/training/notify-user/build-notification#builder раздел Set lock screen visibility

ФУНКЦИОНАЛЬНОСТЬ
2 Разобраться, как восстанавливать приложение после длительного простоя, возможно из saved instans
1 Может быть, как то упорядочивать вывод заявок? По дате? Алфавиту? Может наверху платные?
3 Внедрить зависимости Firebase BoM при следующем обновлении зависмостей
1 Группировать уведомления, Есть тип уведомлений специально для чатов, для возможности ведения истории, примеры тут https://developer.android.com/training/notify-user/build-notification#builder
1 Поработать с отменой уведомлени и с накоплением https://startandroid.ru/ru/uroki/vse-uroki-spiskom/510-urok-185-notifications-rezhimy-otkrytiya-activity.html
2 Подумать, при передаче уведомления не передавать токен, а только ID пользователя, останольное подгружать из БД. 
3 Определять расширение экрана при загрузке первой активити, добавить расширение в переменные глобального класса и использовать их на фрагменте чата
1 Разобраться с отладкой по сети
1 addOnSuccessListener заменить на CompliteListener, там есть проверка на неуспех. Где есть слушатель и метод onCancelled, залогировать ошибки.  
2 Сделать крутилку на деталях встречи, пока грузится инфа и вообще везде сделать крутилку
2 Сделать на деталях встречи: в необязательных полях, если пустые, написать "не указано", но если будет крутилка, то может и вообще не показывать.
3 Сделать кнопку разлогина. Когда пользователь разлогинивается, ему не нужно присылать личных сообщений, а там привязка к токену.
3 Поддержка установки на SD-карту https://developer.android.com/guide/topics/data/install-location
3 Когда определяю разрешение экрана, это нужно? Метод onPostCreate() Новый метод, который появился в API 21. Он вызывается позже onCreate() и в нём можно получить значения размеров компонентов, которые недоступны при построении интерфейса в методе onCreate().

МАРАФЕТ
1 Сделать на форме логин на и где-то возможность обратиться в службу поддержки.
1 Если нет чатов, то показать сообщение, если нет встреч, то показать сообщение.
1 Когда печатаешь в чате несколько строк, при переходе на новую строку сдвигать весь чат выше.
1 При нажатии на кнопку назад сделать предупреждение о выходе из приложения.
2 В чате в темной теме сделать нижнюю панельку серую
2 Попробовать уйти от экран авторизации, как в вайбер или вотсапп.
2 Когда на форме заявки блокируем выбор города, то при клике написать, сначала выберите регион.
2 На форме заявки сделать кнопку подачи заявки в виде FAB 
2 Отбработать ошибки при отправке сообщения, например, что нет интернета.
3 Отладить цвета светлой темы. В проекте есть файлы theme.xml, в зависимости от системной темы они подгружаются. Для этого в манифесте нужно выбрать тему Theme.myDayNight. Так же уйти от картинки, сделать брендовый значек.
3 Нужна статистика о количестве встреч.
3 Почитать для совместимости с различными типами устройств https://developer.android.com/guide/practices/screens_support#screen-independence
3 Оптимизация для планшетов
3 Лицензионное соглашение с пользователем (EULA).

ТЕСТИРОВАНИЕ
Протестировать в режиме Strictmode https://developer.android.com/docs/quality-guidelines/core-app-quality#strictmode
Протестировать, тесты тут: https://developer.android.com/docs/quality-guidelines/core-app-quality

БЕЗОПАСНОСТЬ
https://firebase.google.cn/docs/database/security/core-syntax?authuser=3&skip_cache=true&hl=ru
https://firebase.google.cn/docs/rules/basics?authuser=3&hl=ru&skip_cache=true#realtime-database_2
https://firebase.google.cn/docs/database/security/rules-conditions?authuser=3&hl=ru&skip_cache=true
На данный момент отключил уведомления о угрозах в безопасности. Включить назад в консоли, нажать на колокольчик и далее настройки.
ГитХаб обнаружил, что у меня ключ приложенеия в открытом доступе, нужно завести приватный репозиторий.

РАБОТАЕТ ИЛИ НЕТ
Установить этот атрибут, чтобы даже после длительного возврата стек не очищался и должны всегда начинать с той же активити на которой закончили. 
	alwaysRetainTaskState учтановить в активити параметр true
	If this attribute is set to "true" in the root activity of a task, the default behavior just described does not happen. The task retains all activities in its stack even after a long period.
Если будет плохо работать выборка, то попробовать оптимизировать запросы с БД или перейти на другую БД. 
	Сейчас много, чего фильтруется на уровне приложения из вариантов можно количество мест уменьшить до 10 или диапазон лет сделать до 10 лет и применить array-contains-any 
	https://firebase.google.com/docs/firestore/query-data/queries#in_and_array-contains-any
	Так же можно посмотреть в сторону порциальной загрузки данных, тут что-то есть https://sodocumentation.net/ru/android/topic/5511/%D0%B1%D0%B0%D0%B7%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-firebase-realtime
	Можно использовать курсоры, при выборке применить по возрасту больше чем максимальный, потом упорядочить и начать с минимального возраста startAt https://firebase.google.com/docs/firestore/query-data/query-cursors

БЭКЕНД
Для начала https://cloud.google.com/tools/android-studio/app_engine/run_test_deploy

НЕ ЯСНО
В настойках сборки пароль к ключу с подписью указывается явно, надо скрыть бы.

ПЕРЕД КАЖДОЙ СБОРКОЙ
Прогнать через Lint.
Инкрементировать версии.
Сделать очистку проекта.
Собрать.
Протестировать релизную версию.
Выложить (обновить информацию, скриншоты).
Слить в мастер ветку.

